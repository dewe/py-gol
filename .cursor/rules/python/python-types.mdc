---
description: ENFORCE domain type usage WHEN writing type annotations TO improve code clarity and maintainability
globs: *.py,*.pyi
alwaysApply: false
---
# Domain Types Over Native Types

## Context
- When defining function signatures
- When creating new variables
- When refactoring existing code
- When writing or modifying type annotations

## Requirements
- Use type hints
- Use domain-specific type aliases over native types
- Re-use existing domain concepts when applicable
- Create new type aliases for domain concepts when needed
- Group related type aliases in a types module
- Document type aliases with clear descriptions
- Use consistent naming patterns for type aliases

## Examples

✅ Correct:
```python
# Good: Using domain types
from .types import ViewportDimensions, ViewportOffset

def resize_viewport(
    dimensions: ViewportDimensions,
    offset: ViewportOffset
) -> ViewportState:
    width, height = dimensions
    offset_x, offset_y = offset
    return ViewportState(width, height, offset_x, offset_y)
```

❌ Incorrect:
```python
# Bad: Using native types directly
def resize_viewport(
    width: int,
    height: int,
    offset_x: int,
    offset_y: int
) -> ViewportState:
    return ViewportState(width, height, offset_x, offset_y)
```

## CRITICAL
- NEVER use native types when domain types exist
- ALWAYS create type aliases for domain concepts
- ALWAYS document type aliases with clear descriptions
