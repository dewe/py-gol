---
description: ENFORCE thread-safe testing patterns WHEN testing concurrent code TO prevent flaky tests
globs: tests/**/*_test.py, tests/**/test_*.py
alwaysApply: false
---
<!-- markdownlint-disable MD033 -->

# Thread-Safe Testing Patterns

## Context

- Applied when writing tests for concurrent code
- Used when testing thread-safe data structures
- Essential for message queues and actor systems

## Requirements

- Use thread synchronization primitives (Event, Barrier) for coordination
- Add timeouts to all thread joins to prevent deadlocks
- Handle queue exceptions explicitly (Empty, Full)
- Test with multiple concurrent producers/consumers
- Verify message ordering and completeness
- Clean up threads properly after tests

## Examples

<example>

Good: Uses Event for coordination, handles Empty exception, has timeout

```python
def test_concurrent_queue():
    completion_event = Event()
    msg_count = 100
    received_count = 0
    
    def receive_messages():
        nonlocal received_count
        while received_count < expected_count:
            try:
                queue.get_nowait()
                received_count += 1
            except Empty:
                if completion_event.is_set():
                    break
    
    # Start threads with proper cleanup
    thread.start()
    thread.join(timeout=1)
    completion_event.set()
```

</example>

<example type="invalid">

Bad: No thread safety, unreliable qsize(), no exception handling

```python
def test_concurrent_queue():
    for _ in range(100):
        queue.put(message)
    
    # Check messages received
    assert queue.qsize() == 100
```

</example>

## Critical Patterns

1. 🔒 Always use thread synchronization primitives
2. ⏱️ Add timeouts to prevent deadlocks
3. 🎯 Test with multiple concurrent operations
4. 🧹 Clean up threads after tests
5. ❌ Handle exceptions explicitly
6. ✅ Verify both success and failure cases 
