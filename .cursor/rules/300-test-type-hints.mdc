---
description: ALWAYS add TYPE HINTS to test files TO reduce linting errors
globs: ['tests/**/*_test.py', 'tests/**/test_*.py']
alwaysApply: false
---
<!-- markdownlint-disable MD033 -->

# Test Type Hints

## Context

- When writing test files
- When implementing test functions
- When defining test fixtures

## Requirements

- All test functions MUST have return type annotations (-> None)
- All test fixtures MUST have type annotations
- All test helper functions MUST have complete type hints
- Use explicit types instead of Any
- Import types from the module being tested

## Examples

<example>

```python
from typing import Generator
from blessed import Terminal
from myapp.renderer import RendererConfig

def test_renderer_config_defaults() -> None:
    """
    Given: Default renderer configuration
    When: Creating a new config
    Then: Should have expected default values
    """
    config = RendererConfig()
    assert config.cell_alive == "■"

@pytest.fixture
def mock_terminal() -> Terminal:
    """Provides a mock terminal instance."""
    return Terminal()

@pytest.fixture
def sample_grid() -> Generator[Grid, None, None]:
    """Provides a test grid and handles cleanup."""
    grid = create_test_grid()
    yield grid
    cleanup_grid(grid)
```

</example>

<example type="invalid">

```python
def test_renderer_config():  # Missing return type annotation
    config = RendererConfig()
    assert config.cell_alive == "■"

@pytest.fixture  # Missing return type annotation
def mock_terminal():
    return Terminal()

def helper_function(data):  # Missing type hints
    return process(data)
```

</example>

## Critical Patterns

1. 🎯 Always add `-> None` to test functions
2. 📌 Specify return types for fixtures
3. 🔍 Use proper types for assertions
4. 🧪 Import types from tested modules
5. 🚫 Avoid using Any type
6. ♻️ Use Generator for fixtures with cleanup

## Benefits

- Reduces linting errors
- Improves code maintainability
- Catches type-related bugs early
- Makes test intentions clearer
- Ensures consistency with implementation code 
