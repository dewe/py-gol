---
description: ENFORCE conventional commits format WHEN committing changes TO maintain consistent git history
globs: *
alwaysApply: false
---
# Git Conventional Commits

Rule for committing changes made by CursorAI using conventional commits format.

## Context
- Applied when making git commits through Cursor
- Ensures consistent commit message formatting
- Helps with automated changelog generation

## Requirements
- Commit messages must follow conventional commits format: 

    <type>(<scope>): <description>

- Type must be one of: feat, fix, docs, style, refactor, perf, test, chore
- Scope should be derived from file path or component name
- Description must be clear, concise, written in imperative mood
- Always follow @Conventional Commits specification

## Mapping description to type
This is how to select the correct CHANGE_TYPE based on the content of CHANGE_DESCRIPTION.
```shell
# Extract the change type and scope from the changes
CHANGE_TYPE=""
case "$CHANGE_DESCRIPTION" in
  *"add"*|*"create"*|*"implement"*) CHANGE_TYPE="feat";;
  *"fix"*|*"correct"*|*"resolve"*) CHANGE_TYPE="fix";;
  *"refactor"*|*"restructure"*) CHANGE_TYPE="refactor";;
  *"test"*) CHANGE_TYPE="test";;
  *"doc"*|*"comment"*) CHANGE_TYPE="docs";;
  *"style"*|*"format"*) CHANGE_TYPE="style";;
  *"perf"*|*"optimize"*) CHANGE_TYPE="perf";;
  *) CHANGE_TYPE="chore";;
esac
```

## Examples

<example>
feat(auth): add user authentication endpoint

Implements JWT-based authentication with password hashing.
</example>

<example>
fix(db): resolve connection timeout issue

Increases retry attempts and adds exponential backoff.
</example>

<example type="invalid">
added new login page
# Invalid: Missing type and scope, not imperative mood
</example>

<example type="invalid">
feat: implemented user auth
# Invalid: Missing scope
</example>

## Type Definitions
- feat: New features or significant changes
- fix: Bug fixes
- docs: Documentation changes only
- style: Code style/formatting changes
- refactor: Code changes with no functional change
- perf: Performance improvements
- test: Adding/updating tests
- chore: Maintenance tasks, dependencies
