---
description: ENFORCE pure function patterns WHEN implementing concurrent systems TO ensure thread safety and testability
globs: src/**/*.py
alwaysApply: false
---
<!-- markdownlint-disable MD033 -->

# Pure Function Implementation Patterns

## Context

- When implementing state transitions
- When handling concurrent operations
- When processing messages between actors

## Requirements

- Functions should have no side effects
- Return new state instead of modifying existing
- Use immutable data structures when possible
- Clearly separate pure and impure functions
- Document function purity in docstrings
- Keep pure functions small and focused

## Examples

<example>

```python
def calculate_next_state(current: bool, live_neighbors: int) -> bool:
    """Pure function implementing Game of Life rules."""
    if current:
        return 2 <= live_neighbors <= 3
    return live_neighbors == 3

def get_neighbors(grid: Grid, pos: Position) -> list[Position]:
    """Pure function to get valid neighbor positions."""
    x, y = pos
    size = len(grid)
    return [
        Position((x + dx, y + dy))
        for dx, dy in [(i, j) for i in (-1, 0, 1) for j in (-1, 0, 1)]
        if (dx, dy) != (0, 0) and 0 <= x + dx < size and 0 <= y + dy < size
    ]
```

</example>

<example type="invalid">

```python
def update_cell_state(cell):  # Impure function
    cell.state = not cell.state  # Modifies input
    cell.notify_neighbors()  # Side effect
    return cell

def process_queue(queue):  # Mixed concerns
    while not queue.empty():
        msg = queue.get()  # Side effect
        print(msg)  # Side effect
        update_state(msg)  # Side effect
```

</example> 
