---
description: ENFORCE domain type usage WHEN writing type annotations TO improve code clarity and maintainability
globs: "**/*.{py,pyi}"
alwaysApply: false
---
<!-- markdownlint-disable MD033 -->

# Domain Types Over Native Types

## Context

- When writing or modifying type annotations
- When defining function signatures
- When creating new variables
- When refactoring existing code

## Requirements

- Use domain-specific type aliases over native types
- Create new type aliases for domain concepts when needed
- Group related type aliases in a types module
- Document type aliases with clear descriptions
- Use consistent naming patterns for type aliases

## Examples

<example>

```python
# Good: Using domain types
from .types import ViewportDimensions, ViewportOffset

def resize_viewport(
    dimensions: ViewportDimensions,
    offset: ViewportOffset
) -> ViewportState:
    width, height = dimensions
    offset_x, offset_y = offset
    return ViewportState(width, height, offset_x, offset_y)
```

</example>

<example type="invalid">

```python
# Bad: Using native types directly
def resize_viewport(
    width: int,
    height: int,
    offset_x: int,
    offset_y: int
) -> ViewportState:
    return ViewportState(width, height, offset_x, offset_y)
```

</example>

## Critical Patterns

1. 🏷️ Create type aliases for domain concepts
2. 📦 Group related types in a types module
3. 📝 Document type meanings and constraints
4. 🔄 Use consistent naming patterns
5. 🎯 Prefer domain types over native types

<critical>

- NEVER use native types when domain types exist
- ALWAYS create type aliases for domain concepts
- ALWAYS document type aliases with clear descriptions

</critical>
