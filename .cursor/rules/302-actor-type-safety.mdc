---
description: ENFORCE type safety patterns WHEN implementing actor-based systems TO prevent runtime errors
globs: src/**/*.py
alwaysApply: false
---
<!-- markdownlint-disable MD033 -->

# Actor Type Safety

## Context

- When implementing actor-based concurrent systems
- When using Protocol classes for actor interfaces
- When handling message passing between actors

## Requirements

- Use Protocol classes to define actor interfaces
- Specify concrete types for message queues
- Use type hints for all actor attributes
- Ensure subscriber lists have correct type annotations
- Use type-safe message tuples

## Examples

<example>

```python
class Actor(Protocol):
    id: str
    queue: Queue[tuple[str, bool]]  # Typed queue
    subscribers: list["Actor"]
    state: bool

def broadcast_state(actor: Actor, state: bool) -> None:
    """Type-safe message broadcasting."""
    message: tuple[str, bool] = (actor.id, state)
    for subscriber in actor.subscribers:
        subscriber.queue.put_nowait(message)
```

</example>

<example type="invalid">

```python
class Actor:  # Missing Protocol
    id: str
    queue = Queue()  # Untyped queue
    subscribers = []  # Untyped list

def broadcast_state(actor, state):  # Missing type hints
    message = (actor.id, state)
    for sub in actor.subscribers:
        sub.queue.put(message)
```

</example> 
